    "create_tables.sql": """
CREATE TABLE Member (
    MemberID INT PRIMARY KEY,
    FullName VARCHAR2(100),
    Email VARCHAR2(100),
    PhoneNumber VARCHAR2(20)
);

CREATE TABLE Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR2(200),
    Author VARCHAR2(100),
    Genre VARCHAR2(50),
    AvailabilityStatus VARCHAR2(20)
);

CREATE TABLE Loan (
    LoanID INT PRIMARY KEY,
    BookID INT,
    MemberID INT,
    BorrowDate DATE,
    DueDate DATE,
    ReturnDate DATE,
    Fine NUMBER(5,2),
    FOREIGN KEY (BookID) REFERENCES Books(BookID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

CREATE TABLE AuditLogs (
    AuditID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    Username VARCHAR2(30),
    ActionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    OperationType VARCHAR2(10),
    TableName VARCHAR2(30),
    Status VARCHAR2(10)
);
""",
    "insert_data.sql": """
INSERT INTO Member (MemberID, FullName, Email, PhoneNumber)
VALUES (1, 'Olga Nsengiyumva', 'olga@example.com', '0781234567');

INSERT INTO Books (BookID, Title, Author, Genre, AvailabilityStatus)
VALUES (101, 'Database Systems', 'Silberschatz', 'Education', 'Available');

INSERT INTO Loan (LoanID, BookID, MemberID, BorrowDate, DueDate, ReturnDate, Fine)
VALUES (201, 101, 1, TO_DATE('2025-05-10', 'YYYY-MM-DD'), TO_DATE('2025-05-20', 'YYYY-MM-DD'), NULL, 0.00);
""",
    "procedures.sql": """
CREATE OR REPLACE PROCEDURE GetMemberLoans(p_member_id IN NUMBER)
IS
    CURSOR loan_cur IS
        SELECT b.Title, l.BorrowDate, l.DueDate, l.Fine
        FROM Loan l
        JOIN Books b ON l.BookID = b.BookID
        WHERE l.MemberID = p_member_id;

    loan_rec loan_cur%ROWTYPE;
BEGIN
    OPEN loan_cur;
    LOOP
        FETCH loan_cur INTO loan_rec;
        EXIT WHEN loan_cur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Title: ' || loan_rec.Title || ', Due: ' || loan_rec.DueDate);
    END LOOP;
    CLOSE loan_cur;
END;
/
""",
    "triggers.sql": """
CREATE OR REPLACE TRIGGER Log_Late_Returns
AFTER UPDATE ON Loan
FOR EACH ROW
WHEN (NEW.ReturnDate > NEW.DueDate)
BEGIN
    INSERT INTO AuditLogs (Username, OperationType, TableName, Status)
    VALUES (USER, 'UPDATE', 'Loan', 'LateReturn');
END;
/

CREATE OR REPLACE FUNCTION LogAudit(
    p_user VARCHAR2, p_op VARCHAR2, p_table VARCHAR2, p_status VARCHAR2
) RETURN NUMBER IS
BEGIN
    INSERT INTO AuditLogs (Username, OperationType, TableName, Status)
    VALUES (p_user, p_op, p_table, p_status);
    RETURN 1;
END;
/

CREATE OR REPLACE PACKAGE AuditPkg IS
    PROCEDURE TrackAudit(p_op VARCHAR2, p_table VARCHAR2, p_status VARCHAR2);
END AuditPkg;
/

CREATE OR REPLACE PACKAGE BODY AuditPkg IS
    PROCEDURE TrackAudit(p_op VARCHAR2, p_table VARCHAR2, p_status VARCHAR2) IS
    BEGIN
        INSERT INTO AuditLogs (Username, OperationType, TableName, Status)
        VALUES (USER, p_op, p_table, p_status);
    END;
END AuditPkg;
/